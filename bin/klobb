#!/usr/bin/env node
import program from 'commander';
import * as klobb from '../lib';
import { resolve, join } from 'path';

// babel
import preset2015 from 'babel-preset-es2015';
import syntaxAsync from 'babel-plugin-syntax-async-functions';
import transformAsync from 'babel-plugin-transform-async-to-generator';
import transformRuntime from 'babel-plugin-transform-runtime';
import alias from 'babel-plugin-module-alias';

program
  .option('-p, --port <port>', 'Port to listen on (3000)', parseInt)
  .parse(process.argv);

let file = program.args[program.args.length - 1];

if (!file) {
  console.error(`\nError: Please supply a file`);
  program.outputHelp();
  process.exit(1);
}

if ('/' !== file[0]) {
  file = resolve(process.cwd(), file);
}

// change directory to folder of target script
// TODO: is this right? what are the edge cases and pitfalls?
const targetDir = resolve(join(file, '..'));
process.chdir(targetDir);


// Babel transformation
const path = require.resolve('babel-runtime/package')
  .replace(/[\\\/]package.json$/, '');
require('babel-register')({
  presets: [preset2015],
  plugins: [
    syntaxAsync,
    transformAsync,
    transformRuntime,
    [alias, [
      { src: path, expose: 'babel-runtime' }
    ]]
  ]
});

const handler = require(file).default;

if ('function' !== typeof handler) {
  console.error(`Error: "${file}" does not export a handler function`);
  process.exit(1);
}

const port = program.port || Number.parseInt(process.env.PORT, 10) || 3000;
klobb.serve(handler).listen(port, (err) => {
  if (err) {
    console.error(err.stack);
    process.exit(1);
  }

  console.log(`Listening on ${port}`);
});
